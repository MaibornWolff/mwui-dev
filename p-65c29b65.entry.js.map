{"version":3,"names":["mwImgCss","MwImg","this","onIntersection","async","entries","entry","isIntersecting","observer","disconnectObserver","setSrc","target","onSrcSet","srcset","setSrcSet","connectedCallback","componentDidLoad","imgElement","lazyLoad","connectObserver","srcSet","srcSetState","Array","isArray","map","set","src","size","join","imgEl","getAttribute","setAttribute","removeAttribute","el","IntersectionObserver","observe","disconnect","onLoad","isLoaded","imgDidLoad","emit","onError","imgLoadError","fallback","render","alt","preloadSrc","h","Host","class","decoding","part","bind","ref","id"],"sources":["./src/components/mw-img/mw-img.scss?tag=mw-img&encapsulation=shadow","./src/components/mw-img/mw-img.tsx"],"sourcesContent":[":host {\n  display: block;\n  position: relative;\n  width: 100%;\n  height: 100%;\n\n  img,\n  span,\n  .blur {\n    display: block;\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n  }\n\n  #preload-img {\n    z-index: 2;\n  }\n\n  .blur {\n    backdrop-filter: blur(8px);\n    -webkit-backdrop-filter: blur(8px);\n    z-index: 3;\n  }\n}\n","import { Component, Host, h, Prop, Element, Event, State, EventEmitter, Watch } from \"@stencil/core\";\n\nexport type SrcSetItem = {\n  size: string;\n  src: string;\n};\n\n@Component({\n  tag: \"mw-img\",\n  styleUrl: \"mw-img.scss\",\n  shadow: true,\n})\nexport class MwImg {\n  private observer: IntersectionObserver;\n  private imgElement: HTMLImageElement | null;\n\n  @State() isLoaded = false;\n  @State() srcSetState?: string;\n\n  @Element() el: HTMLMwImgElement;\n\n  /**\n   * Event emitted when image did load\n   */\n  @Event({\n    bubbles: true,\n    cancelable: false,\n    composed: true,\n  })\n  imgDidLoad: EventEmitter;\n\n  /**\n   * Event emitted when image could not be loaded\n   */\n  @Event({\n    bubbles: true,\n    cancelable: false,\n    composed: true,\n  })\n  imgLoadError: EventEmitter;\n\n  /**\n   * Image source for preload\n   */\n  @Prop() preloadSrc: string;\n  /**\n   * Image source\n   */\n  @Prop() src: string;\n  /**\n   * Alt text for the image\n   */\n  @Prop() alt: string;\n  /**\n   * If the image should be lazy loaded\n   */\n  @Prop() lazyLoad = true;\n  /**\n   * URL of the image to be displayed when an error on load occurs\n   */\n  @Prop() fallback: string;\n\n  /**\n   * Different resolutions for different viewport sizes can be passed\n   * e.g. \"img/vasen-420.webp 420w,\n   *       img/vasen-980.webp 980w,\n   *       img/vasen-1680.webp 1680w,\n   *       img/vasen-2400.webp 2400w\"\n   */\n  @Prop() srcset: string | SrcSetItem[];\n  @Watch(\"srcset\") onSrcSet(srcset: string | SrcSetItem[]): void {\n    /**\n     *\n     */\n    this.setSrcSet(srcset);\n  }\n\n  connectedCallback(): void {\n    if (this.srcset) {\n      this.setSrcSet(this.srcset);\n    }\n  }\n\n  componentDidLoad(): void {\n    const { imgElement, lazyLoad } = this;\n\n    if (imgElement && lazyLoad) {\n      this.connectObserver(imgElement);\n    } else {\n      this.setSrc(imgElement);\n    }\n  }\n\n  private setSrcSet(srcSet: string | SrcSetItem[]): void {\n    this.srcSetState = Array.isArray(srcSet) ? srcSet.map(set => `${set.src} ${set.size}`).join(\",\") : srcSet;\n  }\n\n  private setSrc(imgEl: HTMLImageElement): void {\n    if (imgEl.getAttribute(\"data-src\")) {\n      imgEl.setAttribute(\"src\", imgEl.getAttribute(\"data-src\"));\n      imgEl.removeAttribute(\"data-src\");\n    }\n  }\n\n  private connectObserver(el: HTMLElement): void {\n    this.observer = new IntersectionObserver(this.onIntersection);\n    this.observer.observe(el);\n  }\n\n  private disconnectObserver(): void {\n    this.observer.disconnect();\n  }\n\n  private onIntersection = async (entries): Promise<void> => {\n    for (const entry of entries) {\n      if (entry.isIntersecting) {\n        if (this.observer) {\n          this.disconnectObserver();\n        }\n\n        this.setSrc(entry.target);\n      }\n    }\n  };\n\n  private onLoad(): void {\n    this.isLoaded = true;\n    this.imgDidLoad.emit();\n  }\n\n  private onError(): void {\n    this.imgLoadError.emit();\n    if (this.fallback) {\n      this.imgElement.setAttribute(\"src\", this.fallback);\n    }\n  }\n\n  render() {\n    const { src, alt, preloadSrc, isLoaded, srcSetState, onLoad, onError } = this;\n\n    return (\n      <Host class=\"mw-img\">\n        <img\n          decoding=\"async\"\n          data-src={src}\n          alt={alt}\n          part=\"image\"\n          onLoad={onLoad.bind(this)}\n          onError={onError.bind(this)}\n          ref={el => (this.imgElement = el)}\n          srcset={srcSetState}\n        />\n        {preloadSrc && !isLoaded && (\n          <span>\n            <img decoding=\"sync\" src={preloadSrc} alt={alt} id=\"preload-img\" />\n            <div class=\"blur\"></div>\n          </span>\n        )}\n      </Host>\n    );\n  }\n}\n"],"mappings":";;;;gEAAA,MAAMA,EAAW,oR,MCYJC,EAAK,M,2GAqGRC,KAAAC,eAAiBC,MAAOC,IAC9B,IAAK,MAAMC,KAASD,EAAS,CAC3B,GAAIC,EAAMC,eAAgB,CACxB,GAAIL,KAAKM,SAAU,CACjBN,KAAKO,oB,CAGPP,KAAKQ,OAAOJ,EAAMK,O,kBAxGJ,M,yGAwCD,K,8CAcFC,SAASC,GAIxBX,KAAKY,UAAUD,E,CAGjBE,oBACE,GAAIb,KAAKW,OAAQ,CACfX,KAAKY,UAAUZ,KAAKW,O,EAIxBG,mBACE,MAAMC,WAAEA,EAAUC,SAAEA,GAAahB,KAEjC,GAAIe,GAAcC,EAAU,CAC1BhB,KAAKiB,gBAAgBF,E,KAChB,CACLf,KAAKQ,OAAOO,E,EAIRH,UAAUM,GAChBlB,KAAKmB,YAAcC,MAAMC,QAAQH,GAAUA,EAAOI,KAAIC,GAAO,GAAGA,EAAIC,OAAOD,EAAIE,SAAQC,KAAK,KAAOR,C,CAG7FV,OAAOmB,GACb,GAAIA,EAAMC,aAAa,YAAa,CAClCD,EAAME,aAAa,MAAOF,EAAMC,aAAa,aAC7CD,EAAMG,gBAAgB,W,EAIlBb,gBAAgBc,GACtB/B,KAAKM,SAAW,IAAI0B,qBAAqBhC,KAAKC,gBAC9CD,KAAKM,SAAS2B,QAAQF,E,CAGhBxB,qBACNP,KAAKM,SAAS4B,Y,CAeRC,SACNnC,KAAKoC,SAAW,KAChBpC,KAAKqC,WAAWC,M,CAGVC,UACNvC,KAAKwC,aAAaF,OAClB,GAAItC,KAAKyC,SAAU,CACjBzC,KAAKe,WAAWc,aAAa,MAAO7B,KAAKyC,S,EAI7CC,SACE,MAAMlB,IAAEA,EAAGmB,IAAEA,EAAGC,WAAEA,EAAUR,SAAEA,EAAQjB,YAAEA,EAAWgB,OAAEA,EAAMI,QAAEA,GAAYvC,KAEzE,OACE6C,EAACC,EAAI,CAACC,MAAM,UACVF,EAAA,OACEG,SAAS,QAAO,WACNxB,EACVmB,IAAKA,EACLM,KAAK,QACLd,OAAQA,EAAOe,KAAKlD,MACpBuC,QAASA,EAAQW,KAAKlD,MACtBmD,IAAKpB,GAAO/B,KAAKe,WAAagB,EAC9BpB,OAAQQ,IAETyB,IAAeR,GACdS,EAAA,YACEA,EAAA,OAAKG,SAAS,OAAOxB,IAAKoB,EAAYD,IAAKA,EAAKS,GAAG,gBACnDP,EAAA,OAAKE,MAAM,U"}